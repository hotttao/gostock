// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gostock/internal/data/ent/predicate"
	"gostock/internal/data/ent/stockinfo"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeStockInfo = "StockInfo"
)

// StockInfoMutation represents an operation that mutates the StockInfo nodes in the graph.
type StockInfoMutation struct {
	config
	op             Op
	typ            string
	id             *int
	ts_code        *string
	symbol         *string
	name           *string
	area           *string
	industry       *string
	fullname       *string
	enname         *string
	cnspell        *string
	market         *string
	exchange       *string
	curr_type      *string
	list_status    *stockinfo.ListStatus
	list_date      *time.Time
	delist_date    *time.Time
	is_hs          *string
	is_leader      *bool
	label_industry *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*StockInfo, error)
	predicates     []predicate.StockInfo
}

var _ ent.Mutation = (*StockInfoMutation)(nil)

// stockinfoOption allows management of the mutation configuration using functional options.
type stockinfoOption func(*StockInfoMutation)

// newStockInfoMutation creates new mutation for the StockInfo entity.
func newStockInfoMutation(c config, op Op, opts ...stockinfoOption) *StockInfoMutation {
	m := &StockInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeStockInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStockInfoID sets the ID field of the mutation.
func withStockInfoID(id int) stockinfoOption {
	return func(m *StockInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *StockInfo
		)
		m.oldValue = func(ctx context.Context) (*StockInfo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StockInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStockInfo sets the old StockInfo of the mutation.
func withStockInfo(node *StockInfo) stockinfoOption {
	return func(m *StockInfoMutation) {
		m.oldValue = func(context.Context) (*StockInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StockInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StockInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StockInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StockInfoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StockInfo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTsCode sets the "ts_code" field.
func (m *StockInfoMutation) SetTsCode(s string) {
	m.ts_code = &s
}

// TsCode returns the value of the "ts_code" field in the mutation.
func (m *StockInfoMutation) TsCode() (r string, exists bool) {
	v := m.ts_code
	if v == nil {
		return
	}
	return *v, true
}

// OldTsCode returns the old "ts_code" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldTsCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTsCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTsCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTsCode: %w", err)
	}
	return oldValue.TsCode, nil
}

// ResetTsCode resets all changes to the "ts_code" field.
func (m *StockInfoMutation) ResetTsCode() {
	m.ts_code = nil
}

// SetSymbol sets the "symbol" field.
func (m *StockInfoMutation) SetSymbol(s string) {
	m.symbol = &s
}

// Symbol returns the value of the "symbol" field in the mutation.
func (m *StockInfoMutation) Symbol() (r string, exists bool) {
	v := m.symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldSymbol returns the old "symbol" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldSymbol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymbol: %w", err)
	}
	return oldValue.Symbol, nil
}

// ResetSymbol resets all changes to the "symbol" field.
func (m *StockInfoMutation) ResetSymbol() {
	m.symbol = nil
}

// SetName sets the "name" field.
func (m *StockInfoMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StockInfoMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *StockInfoMutation) ResetName() {
	m.name = nil
}

// SetArea sets the "area" field.
func (m *StockInfoMutation) SetArea(s string) {
	m.area = &s
}

// Area returns the value of the "area" field in the mutation.
func (m *StockInfoMutation) Area() (r string, exists bool) {
	v := m.area
	if v == nil {
		return
	}
	return *v, true
}

// OldArea returns the old "area" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldArea(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArea is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArea requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArea: %w", err)
	}
	return oldValue.Area, nil
}

// ClearArea clears the value of the "area" field.
func (m *StockInfoMutation) ClearArea() {
	m.area = nil
	m.clearedFields[stockinfo.FieldArea] = struct{}{}
}

// AreaCleared returns if the "area" field was cleared in this mutation.
func (m *StockInfoMutation) AreaCleared() bool {
	_, ok := m.clearedFields[stockinfo.FieldArea]
	return ok
}

// ResetArea resets all changes to the "area" field.
func (m *StockInfoMutation) ResetArea() {
	m.area = nil
	delete(m.clearedFields, stockinfo.FieldArea)
}

// SetIndustry sets the "industry" field.
func (m *StockInfoMutation) SetIndustry(s string) {
	m.industry = &s
}

// Industry returns the value of the "industry" field in the mutation.
func (m *StockInfoMutation) Industry() (r string, exists bool) {
	v := m.industry
	if v == nil {
		return
	}
	return *v, true
}

// OldIndustry returns the old "industry" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldIndustry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndustry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndustry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndustry: %w", err)
	}
	return oldValue.Industry, nil
}

// ClearIndustry clears the value of the "industry" field.
func (m *StockInfoMutation) ClearIndustry() {
	m.industry = nil
	m.clearedFields[stockinfo.FieldIndustry] = struct{}{}
}

// IndustryCleared returns if the "industry" field was cleared in this mutation.
func (m *StockInfoMutation) IndustryCleared() bool {
	_, ok := m.clearedFields[stockinfo.FieldIndustry]
	return ok
}

// ResetIndustry resets all changes to the "industry" field.
func (m *StockInfoMutation) ResetIndustry() {
	m.industry = nil
	delete(m.clearedFields, stockinfo.FieldIndustry)
}

// SetFullname sets the "fullname" field.
func (m *StockInfoMutation) SetFullname(s string) {
	m.fullname = &s
}

// Fullname returns the value of the "fullname" field in the mutation.
func (m *StockInfoMutation) Fullname() (r string, exists bool) {
	v := m.fullname
	if v == nil {
		return
	}
	return *v, true
}

// OldFullname returns the old "fullname" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldFullname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFullname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFullname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFullname: %w", err)
	}
	return oldValue.Fullname, nil
}

// ClearFullname clears the value of the "fullname" field.
func (m *StockInfoMutation) ClearFullname() {
	m.fullname = nil
	m.clearedFields[stockinfo.FieldFullname] = struct{}{}
}

// FullnameCleared returns if the "fullname" field was cleared in this mutation.
func (m *StockInfoMutation) FullnameCleared() bool {
	_, ok := m.clearedFields[stockinfo.FieldFullname]
	return ok
}

// ResetFullname resets all changes to the "fullname" field.
func (m *StockInfoMutation) ResetFullname() {
	m.fullname = nil
	delete(m.clearedFields, stockinfo.FieldFullname)
}

// SetEnname sets the "enname" field.
func (m *StockInfoMutation) SetEnname(s string) {
	m.enname = &s
}

// Enname returns the value of the "enname" field in the mutation.
func (m *StockInfoMutation) Enname() (r string, exists bool) {
	v := m.enname
	if v == nil {
		return
	}
	return *v, true
}

// OldEnname returns the old "enname" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldEnname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnname: %w", err)
	}
	return oldValue.Enname, nil
}

// ClearEnname clears the value of the "enname" field.
func (m *StockInfoMutation) ClearEnname() {
	m.enname = nil
	m.clearedFields[stockinfo.FieldEnname] = struct{}{}
}

// EnnameCleared returns if the "enname" field was cleared in this mutation.
func (m *StockInfoMutation) EnnameCleared() bool {
	_, ok := m.clearedFields[stockinfo.FieldEnname]
	return ok
}

// ResetEnname resets all changes to the "enname" field.
func (m *StockInfoMutation) ResetEnname() {
	m.enname = nil
	delete(m.clearedFields, stockinfo.FieldEnname)
}

// SetCnspell sets the "cnspell" field.
func (m *StockInfoMutation) SetCnspell(s string) {
	m.cnspell = &s
}

// Cnspell returns the value of the "cnspell" field in the mutation.
func (m *StockInfoMutation) Cnspell() (r string, exists bool) {
	v := m.cnspell
	if v == nil {
		return
	}
	return *v, true
}

// OldCnspell returns the old "cnspell" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldCnspell(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCnspell is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCnspell requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCnspell: %w", err)
	}
	return oldValue.Cnspell, nil
}

// ClearCnspell clears the value of the "cnspell" field.
func (m *StockInfoMutation) ClearCnspell() {
	m.cnspell = nil
	m.clearedFields[stockinfo.FieldCnspell] = struct{}{}
}

// CnspellCleared returns if the "cnspell" field was cleared in this mutation.
func (m *StockInfoMutation) CnspellCleared() bool {
	_, ok := m.clearedFields[stockinfo.FieldCnspell]
	return ok
}

// ResetCnspell resets all changes to the "cnspell" field.
func (m *StockInfoMutation) ResetCnspell() {
	m.cnspell = nil
	delete(m.clearedFields, stockinfo.FieldCnspell)
}

// SetMarket sets the "market" field.
func (m *StockInfoMutation) SetMarket(s string) {
	m.market = &s
}

// Market returns the value of the "market" field in the mutation.
func (m *StockInfoMutation) Market() (r string, exists bool) {
	v := m.market
	if v == nil {
		return
	}
	return *v, true
}

// OldMarket returns the old "market" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldMarket(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarket is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarket requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarket: %w", err)
	}
	return oldValue.Market, nil
}

// ResetMarket resets all changes to the "market" field.
func (m *StockInfoMutation) ResetMarket() {
	m.market = nil
}

// SetExchange sets the "exchange" field.
func (m *StockInfoMutation) SetExchange(s string) {
	m.exchange = &s
}

// Exchange returns the value of the "exchange" field in the mutation.
func (m *StockInfoMutation) Exchange() (r string, exists bool) {
	v := m.exchange
	if v == nil {
		return
	}
	return *v, true
}

// OldExchange returns the old "exchange" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldExchange(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExchange is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExchange requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExchange: %w", err)
	}
	return oldValue.Exchange, nil
}

// ClearExchange clears the value of the "exchange" field.
func (m *StockInfoMutation) ClearExchange() {
	m.exchange = nil
	m.clearedFields[stockinfo.FieldExchange] = struct{}{}
}

// ExchangeCleared returns if the "exchange" field was cleared in this mutation.
func (m *StockInfoMutation) ExchangeCleared() bool {
	_, ok := m.clearedFields[stockinfo.FieldExchange]
	return ok
}

// ResetExchange resets all changes to the "exchange" field.
func (m *StockInfoMutation) ResetExchange() {
	m.exchange = nil
	delete(m.clearedFields, stockinfo.FieldExchange)
}

// SetCurrType sets the "curr_type" field.
func (m *StockInfoMutation) SetCurrType(s string) {
	m.curr_type = &s
}

// CurrType returns the value of the "curr_type" field in the mutation.
func (m *StockInfoMutation) CurrType() (r string, exists bool) {
	v := m.curr_type
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrType returns the old "curr_type" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldCurrType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrType: %w", err)
	}
	return oldValue.CurrType, nil
}

// ClearCurrType clears the value of the "curr_type" field.
func (m *StockInfoMutation) ClearCurrType() {
	m.curr_type = nil
	m.clearedFields[stockinfo.FieldCurrType] = struct{}{}
}

// CurrTypeCleared returns if the "curr_type" field was cleared in this mutation.
func (m *StockInfoMutation) CurrTypeCleared() bool {
	_, ok := m.clearedFields[stockinfo.FieldCurrType]
	return ok
}

// ResetCurrType resets all changes to the "curr_type" field.
func (m *StockInfoMutation) ResetCurrType() {
	m.curr_type = nil
	delete(m.clearedFields, stockinfo.FieldCurrType)
}

// SetListStatus sets the "list_status" field.
func (m *StockInfoMutation) SetListStatus(ss stockinfo.ListStatus) {
	m.list_status = &ss
}

// ListStatus returns the value of the "list_status" field in the mutation.
func (m *StockInfoMutation) ListStatus() (r stockinfo.ListStatus, exists bool) {
	v := m.list_status
	if v == nil {
		return
	}
	return *v, true
}

// OldListStatus returns the old "list_status" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldListStatus(ctx context.Context) (v stockinfo.ListStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldListStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldListStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldListStatus: %w", err)
	}
	return oldValue.ListStatus, nil
}

// ResetListStatus resets all changes to the "list_status" field.
func (m *StockInfoMutation) ResetListStatus() {
	m.list_status = nil
}

// SetListDate sets the "list_date" field.
func (m *StockInfoMutation) SetListDate(t time.Time) {
	m.list_date = &t
}

// ListDate returns the value of the "list_date" field in the mutation.
func (m *StockInfoMutation) ListDate() (r time.Time, exists bool) {
	v := m.list_date
	if v == nil {
		return
	}
	return *v, true
}

// OldListDate returns the old "list_date" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldListDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldListDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldListDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldListDate: %w", err)
	}
	return oldValue.ListDate, nil
}

// ResetListDate resets all changes to the "list_date" field.
func (m *StockInfoMutation) ResetListDate() {
	m.list_date = nil
}

// SetDelistDate sets the "delist_date" field.
func (m *StockInfoMutation) SetDelistDate(t time.Time) {
	m.delist_date = &t
}

// DelistDate returns the value of the "delist_date" field in the mutation.
func (m *StockInfoMutation) DelistDate() (r time.Time, exists bool) {
	v := m.delist_date
	if v == nil {
		return
	}
	return *v, true
}

// OldDelistDate returns the old "delist_date" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldDelistDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDelistDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDelistDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDelistDate: %w", err)
	}
	return oldValue.DelistDate, nil
}

// ClearDelistDate clears the value of the "delist_date" field.
func (m *StockInfoMutation) ClearDelistDate() {
	m.delist_date = nil
	m.clearedFields[stockinfo.FieldDelistDate] = struct{}{}
}

// DelistDateCleared returns if the "delist_date" field was cleared in this mutation.
func (m *StockInfoMutation) DelistDateCleared() bool {
	_, ok := m.clearedFields[stockinfo.FieldDelistDate]
	return ok
}

// ResetDelistDate resets all changes to the "delist_date" field.
func (m *StockInfoMutation) ResetDelistDate() {
	m.delist_date = nil
	delete(m.clearedFields, stockinfo.FieldDelistDate)
}

// SetIsHs sets the "is_hs" field.
func (m *StockInfoMutation) SetIsHs(s string) {
	m.is_hs = &s
}

// IsHs returns the value of the "is_hs" field in the mutation.
func (m *StockInfoMutation) IsHs() (r string, exists bool) {
	v := m.is_hs
	if v == nil {
		return
	}
	return *v, true
}

// OldIsHs returns the old "is_hs" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldIsHs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsHs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsHs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsHs: %w", err)
	}
	return oldValue.IsHs, nil
}

// ClearIsHs clears the value of the "is_hs" field.
func (m *StockInfoMutation) ClearIsHs() {
	m.is_hs = nil
	m.clearedFields[stockinfo.FieldIsHs] = struct{}{}
}

// IsHsCleared returns if the "is_hs" field was cleared in this mutation.
func (m *StockInfoMutation) IsHsCleared() bool {
	_, ok := m.clearedFields[stockinfo.FieldIsHs]
	return ok
}

// ResetIsHs resets all changes to the "is_hs" field.
func (m *StockInfoMutation) ResetIsHs() {
	m.is_hs = nil
	delete(m.clearedFields, stockinfo.FieldIsHs)
}

// SetIsLeader sets the "is_leader" field.
func (m *StockInfoMutation) SetIsLeader(b bool) {
	m.is_leader = &b
}

// IsLeader returns the value of the "is_leader" field in the mutation.
func (m *StockInfoMutation) IsLeader() (r bool, exists bool) {
	v := m.is_leader
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLeader returns the old "is_leader" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldIsLeader(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLeader is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLeader requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLeader: %w", err)
	}
	return oldValue.IsLeader, nil
}

// ResetIsLeader resets all changes to the "is_leader" field.
func (m *StockInfoMutation) ResetIsLeader() {
	m.is_leader = nil
}

// SetLabelIndustry sets the "label_industry" field.
func (m *StockInfoMutation) SetLabelIndustry(s string) {
	m.label_industry = &s
}

// LabelIndustry returns the value of the "label_industry" field in the mutation.
func (m *StockInfoMutation) LabelIndustry() (r string, exists bool) {
	v := m.label_industry
	if v == nil {
		return
	}
	return *v, true
}

// OldLabelIndustry returns the old "label_industry" field's value of the StockInfo entity.
// If the StockInfo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StockInfoMutation) OldLabelIndustry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabelIndustry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabelIndustry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabelIndustry: %w", err)
	}
	return oldValue.LabelIndustry, nil
}

// ClearLabelIndustry clears the value of the "label_industry" field.
func (m *StockInfoMutation) ClearLabelIndustry() {
	m.label_industry = nil
	m.clearedFields[stockinfo.FieldLabelIndustry] = struct{}{}
}

// LabelIndustryCleared returns if the "label_industry" field was cleared in this mutation.
func (m *StockInfoMutation) LabelIndustryCleared() bool {
	_, ok := m.clearedFields[stockinfo.FieldLabelIndustry]
	return ok
}

// ResetLabelIndustry resets all changes to the "label_industry" field.
func (m *StockInfoMutation) ResetLabelIndustry() {
	m.label_industry = nil
	delete(m.clearedFields, stockinfo.FieldLabelIndustry)
}

// Where appends a list predicates to the StockInfoMutation builder.
func (m *StockInfoMutation) Where(ps ...predicate.StockInfo) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *StockInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (StockInfo).
func (m *StockInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StockInfoMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.ts_code != nil {
		fields = append(fields, stockinfo.FieldTsCode)
	}
	if m.symbol != nil {
		fields = append(fields, stockinfo.FieldSymbol)
	}
	if m.name != nil {
		fields = append(fields, stockinfo.FieldName)
	}
	if m.area != nil {
		fields = append(fields, stockinfo.FieldArea)
	}
	if m.industry != nil {
		fields = append(fields, stockinfo.FieldIndustry)
	}
	if m.fullname != nil {
		fields = append(fields, stockinfo.FieldFullname)
	}
	if m.enname != nil {
		fields = append(fields, stockinfo.FieldEnname)
	}
	if m.cnspell != nil {
		fields = append(fields, stockinfo.FieldCnspell)
	}
	if m.market != nil {
		fields = append(fields, stockinfo.FieldMarket)
	}
	if m.exchange != nil {
		fields = append(fields, stockinfo.FieldExchange)
	}
	if m.curr_type != nil {
		fields = append(fields, stockinfo.FieldCurrType)
	}
	if m.list_status != nil {
		fields = append(fields, stockinfo.FieldListStatus)
	}
	if m.list_date != nil {
		fields = append(fields, stockinfo.FieldListDate)
	}
	if m.delist_date != nil {
		fields = append(fields, stockinfo.FieldDelistDate)
	}
	if m.is_hs != nil {
		fields = append(fields, stockinfo.FieldIsHs)
	}
	if m.is_leader != nil {
		fields = append(fields, stockinfo.FieldIsLeader)
	}
	if m.label_industry != nil {
		fields = append(fields, stockinfo.FieldLabelIndustry)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StockInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case stockinfo.FieldTsCode:
		return m.TsCode()
	case stockinfo.FieldSymbol:
		return m.Symbol()
	case stockinfo.FieldName:
		return m.Name()
	case stockinfo.FieldArea:
		return m.Area()
	case stockinfo.FieldIndustry:
		return m.Industry()
	case stockinfo.FieldFullname:
		return m.Fullname()
	case stockinfo.FieldEnname:
		return m.Enname()
	case stockinfo.FieldCnspell:
		return m.Cnspell()
	case stockinfo.FieldMarket:
		return m.Market()
	case stockinfo.FieldExchange:
		return m.Exchange()
	case stockinfo.FieldCurrType:
		return m.CurrType()
	case stockinfo.FieldListStatus:
		return m.ListStatus()
	case stockinfo.FieldListDate:
		return m.ListDate()
	case stockinfo.FieldDelistDate:
		return m.DelistDate()
	case stockinfo.FieldIsHs:
		return m.IsHs()
	case stockinfo.FieldIsLeader:
		return m.IsLeader()
	case stockinfo.FieldLabelIndustry:
		return m.LabelIndustry()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StockInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case stockinfo.FieldTsCode:
		return m.OldTsCode(ctx)
	case stockinfo.FieldSymbol:
		return m.OldSymbol(ctx)
	case stockinfo.FieldName:
		return m.OldName(ctx)
	case stockinfo.FieldArea:
		return m.OldArea(ctx)
	case stockinfo.FieldIndustry:
		return m.OldIndustry(ctx)
	case stockinfo.FieldFullname:
		return m.OldFullname(ctx)
	case stockinfo.FieldEnname:
		return m.OldEnname(ctx)
	case stockinfo.FieldCnspell:
		return m.OldCnspell(ctx)
	case stockinfo.FieldMarket:
		return m.OldMarket(ctx)
	case stockinfo.FieldExchange:
		return m.OldExchange(ctx)
	case stockinfo.FieldCurrType:
		return m.OldCurrType(ctx)
	case stockinfo.FieldListStatus:
		return m.OldListStatus(ctx)
	case stockinfo.FieldListDate:
		return m.OldListDate(ctx)
	case stockinfo.FieldDelistDate:
		return m.OldDelistDate(ctx)
	case stockinfo.FieldIsHs:
		return m.OldIsHs(ctx)
	case stockinfo.FieldIsLeader:
		return m.OldIsLeader(ctx)
	case stockinfo.FieldLabelIndustry:
		return m.OldLabelIndustry(ctx)
	}
	return nil, fmt.Errorf("unknown StockInfo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StockInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case stockinfo.FieldTsCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTsCode(v)
		return nil
	case stockinfo.FieldSymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymbol(v)
		return nil
	case stockinfo.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case stockinfo.FieldArea:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArea(v)
		return nil
	case stockinfo.FieldIndustry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndustry(v)
		return nil
	case stockinfo.FieldFullname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFullname(v)
		return nil
	case stockinfo.FieldEnname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnname(v)
		return nil
	case stockinfo.FieldCnspell:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCnspell(v)
		return nil
	case stockinfo.FieldMarket:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarket(v)
		return nil
	case stockinfo.FieldExchange:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExchange(v)
		return nil
	case stockinfo.FieldCurrType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrType(v)
		return nil
	case stockinfo.FieldListStatus:
		v, ok := value.(stockinfo.ListStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetListStatus(v)
		return nil
	case stockinfo.FieldListDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetListDate(v)
		return nil
	case stockinfo.FieldDelistDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDelistDate(v)
		return nil
	case stockinfo.FieldIsHs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsHs(v)
		return nil
	case stockinfo.FieldIsLeader:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLeader(v)
		return nil
	case stockinfo.FieldLabelIndustry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabelIndustry(v)
		return nil
	}
	return fmt.Errorf("unknown StockInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StockInfoMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StockInfoMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StockInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StockInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StockInfoMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(stockinfo.FieldArea) {
		fields = append(fields, stockinfo.FieldArea)
	}
	if m.FieldCleared(stockinfo.FieldIndustry) {
		fields = append(fields, stockinfo.FieldIndustry)
	}
	if m.FieldCleared(stockinfo.FieldFullname) {
		fields = append(fields, stockinfo.FieldFullname)
	}
	if m.FieldCleared(stockinfo.FieldEnname) {
		fields = append(fields, stockinfo.FieldEnname)
	}
	if m.FieldCleared(stockinfo.FieldCnspell) {
		fields = append(fields, stockinfo.FieldCnspell)
	}
	if m.FieldCleared(stockinfo.FieldExchange) {
		fields = append(fields, stockinfo.FieldExchange)
	}
	if m.FieldCleared(stockinfo.FieldCurrType) {
		fields = append(fields, stockinfo.FieldCurrType)
	}
	if m.FieldCleared(stockinfo.FieldDelistDate) {
		fields = append(fields, stockinfo.FieldDelistDate)
	}
	if m.FieldCleared(stockinfo.FieldIsHs) {
		fields = append(fields, stockinfo.FieldIsHs)
	}
	if m.FieldCleared(stockinfo.FieldLabelIndustry) {
		fields = append(fields, stockinfo.FieldLabelIndustry)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StockInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StockInfoMutation) ClearField(name string) error {
	switch name {
	case stockinfo.FieldArea:
		m.ClearArea()
		return nil
	case stockinfo.FieldIndustry:
		m.ClearIndustry()
		return nil
	case stockinfo.FieldFullname:
		m.ClearFullname()
		return nil
	case stockinfo.FieldEnname:
		m.ClearEnname()
		return nil
	case stockinfo.FieldCnspell:
		m.ClearCnspell()
		return nil
	case stockinfo.FieldExchange:
		m.ClearExchange()
		return nil
	case stockinfo.FieldCurrType:
		m.ClearCurrType()
		return nil
	case stockinfo.FieldDelistDate:
		m.ClearDelistDate()
		return nil
	case stockinfo.FieldIsHs:
		m.ClearIsHs()
		return nil
	case stockinfo.FieldLabelIndustry:
		m.ClearLabelIndustry()
		return nil
	}
	return fmt.Errorf("unknown StockInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StockInfoMutation) ResetField(name string) error {
	switch name {
	case stockinfo.FieldTsCode:
		m.ResetTsCode()
		return nil
	case stockinfo.FieldSymbol:
		m.ResetSymbol()
		return nil
	case stockinfo.FieldName:
		m.ResetName()
		return nil
	case stockinfo.FieldArea:
		m.ResetArea()
		return nil
	case stockinfo.FieldIndustry:
		m.ResetIndustry()
		return nil
	case stockinfo.FieldFullname:
		m.ResetFullname()
		return nil
	case stockinfo.FieldEnname:
		m.ResetEnname()
		return nil
	case stockinfo.FieldCnspell:
		m.ResetCnspell()
		return nil
	case stockinfo.FieldMarket:
		m.ResetMarket()
		return nil
	case stockinfo.FieldExchange:
		m.ResetExchange()
		return nil
	case stockinfo.FieldCurrType:
		m.ResetCurrType()
		return nil
	case stockinfo.FieldListStatus:
		m.ResetListStatus()
		return nil
	case stockinfo.FieldListDate:
		m.ResetListDate()
		return nil
	case stockinfo.FieldDelistDate:
		m.ResetDelistDate()
		return nil
	case stockinfo.FieldIsHs:
		m.ResetIsHs()
		return nil
	case stockinfo.FieldIsLeader:
		m.ResetIsLeader()
		return nil
	case stockinfo.FieldLabelIndustry:
		m.ResetLabelIndustry()
		return nil
	}
	return fmt.Errorf("unknown StockInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StockInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StockInfoMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StockInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StockInfoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StockInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StockInfoMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StockInfoMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown StockInfo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StockInfoMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown StockInfo edge %s", name)
}
