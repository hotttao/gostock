// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"gostock/internal/data/ent/stockinfo"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StockInfoCreate is the builder for creating a StockInfo entity.
type StockInfoCreate struct {
	config
	mutation *StockInfoMutation
	hooks    []Hook
}

// SetTsCode sets the "ts_code" field.
func (sic *StockInfoCreate) SetTsCode(s string) *StockInfoCreate {
	sic.mutation.SetTsCode(s)
	return sic
}

// SetSymbol sets the "symbol" field.
func (sic *StockInfoCreate) SetSymbol(s string) *StockInfoCreate {
	sic.mutation.SetSymbol(s)
	return sic
}

// SetName sets the "name" field.
func (sic *StockInfoCreate) SetName(s string) *StockInfoCreate {
	sic.mutation.SetName(s)
	return sic
}

// SetArea sets the "area" field.
func (sic *StockInfoCreate) SetArea(s string) *StockInfoCreate {
	sic.mutation.SetArea(s)
	return sic
}

// SetNillableArea sets the "area" field if the given value is not nil.
func (sic *StockInfoCreate) SetNillableArea(s *string) *StockInfoCreate {
	if s != nil {
		sic.SetArea(*s)
	}
	return sic
}

// SetIndustry sets the "industry" field.
func (sic *StockInfoCreate) SetIndustry(s string) *StockInfoCreate {
	sic.mutation.SetIndustry(s)
	return sic
}

// SetNillableIndustry sets the "industry" field if the given value is not nil.
func (sic *StockInfoCreate) SetNillableIndustry(s *string) *StockInfoCreate {
	if s != nil {
		sic.SetIndustry(*s)
	}
	return sic
}

// SetFullname sets the "fullname" field.
func (sic *StockInfoCreate) SetFullname(s string) *StockInfoCreate {
	sic.mutation.SetFullname(s)
	return sic
}

// SetNillableFullname sets the "fullname" field if the given value is not nil.
func (sic *StockInfoCreate) SetNillableFullname(s *string) *StockInfoCreate {
	if s != nil {
		sic.SetFullname(*s)
	}
	return sic
}

// SetEnname sets the "enname" field.
func (sic *StockInfoCreate) SetEnname(s string) *StockInfoCreate {
	sic.mutation.SetEnname(s)
	return sic
}

// SetNillableEnname sets the "enname" field if the given value is not nil.
func (sic *StockInfoCreate) SetNillableEnname(s *string) *StockInfoCreate {
	if s != nil {
		sic.SetEnname(*s)
	}
	return sic
}

// SetCnspell sets the "cnspell" field.
func (sic *StockInfoCreate) SetCnspell(s string) *StockInfoCreate {
	sic.mutation.SetCnspell(s)
	return sic
}

// SetNillableCnspell sets the "cnspell" field if the given value is not nil.
func (sic *StockInfoCreate) SetNillableCnspell(s *string) *StockInfoCreate {
	if s != nil {
		sic.SetCnspell(*s)
	}
	return sic
}

// SetMarket sets the "market" field.
func (sic *StockInfoCreate) SetMarket(s string) *StockInfoCreate {
	sic.mutation.SetMarket(s)
	return sic
}

// SetExchange sets the "exchange" field.
func (sic *StockInfoCreate) SetExchange(s string) *StockInfoCreate {
	sic.mutation.SetExchange(s)
	return sic
}

// SetNillableExchange sets the "exchange" field if the given value is not nil.
func (sic *StockInfoCreate) SetNillableExchange(s *string) *StockInfoCreate {
	if s != nil {
		sic.SetExchange(*s)
	}
	return sic
}

// SetCurrType sets the "curr_type" field.
func (sic *StockInfoCreate) SetCurrType(s string) *StockInfoCreate {
	sic.mutation.SetCurrType(s)
	return sic
}

// SetNillableCurrType sets the "curr_type" field if the given value is not nil.
func (sic *StockInfoCreate) SetNillableCurrType(s *string) *StockInfoCreate {
	if s != nil {
		sic.SetCurrType(*s)
	}
	return sic
}

// SetListStatus sets the "list_status" field.
func (sic *StockInfoCreate) SetListStatus(ss stockinfo.ListStatus) *StockInfoCreate {
	sic.mutation.SetListStatus(ss)
	return sic
}

// SetNillableListStatus sets the "list_status" field if the given value is not nil.
func (sic *StockInfoCreate) SetNillableListStatus(ss *stockinfo.ListStatus) *StockInfoCreate {
	if ss != nil {
		sic.SetListStatus(*ss)
	}
	return sic
}

// SetListDate sets the "list_date" field.
func (sic *StockInfoCreate) SetListDate(t time.Time) *StockInfoCreate {
	sic.mutation.SetListDate(t)
	return sic
}

// SetDelistDate sets the "delist_date" field.
func (sic *StockInfoCreate) SetDelistDate(t time.Time) *StockInfoCreate {
	sic.mutation.SetDelistDate(t)
	return sic
}

// SetNillableDelistDate sets the "delist_date" field if the given value is not nil.
func (sic *StockInfoCreate) SetNillableDelistDate(t *time.Time) *StockInfoCreate {
	if t != nil {
		sic.SetDelistDate(*t)
	}
	return sic
}

// SetIsHs sets the "is_hs" field.
func (sic *StockInfoCreate) SetIsHs(s string) *StockInfoCreate {
	sic.mutation.SetIsHs(s)
	return sic
}

// SetNillableIsHs sets the "is_hs" field if the given value is not nil.
func (sic *StockInfoCreate) SetNillableIsHs(s *string) *StockInfoCreate {
	if s != nil {
		sic.SetIsHs(*s)
	}
	return sic
}

// SetIsLeader sets the "is_leader" field.
func (sic *StockInfoCreate) SetIsLeader(b bool) *StockInfoCreate {
	sic.mutation.SetIsLeader(b)
	return sic
}

// SetNillableIsLeader sets the "is_leader" field if the given value is not nil.
func (sic *StockInfoCreate) SetNillableIsLeader(b *bool) *StockInfoCreate {
	if b != nil {
		sic.SetIsLeader(*b)
	}
	return sic
}

// SetLabelIndustry sets the "label_industry" field.
func (sic *StockInfoCreate) SetLabelIndustry(s string) *StockInfoCreate {
	sic.mutation.SetLabelIndustry(s)
	return sic
}

// SetNillableLabelIndustry sets the "label_industry" field if the given value is not nil.
func (sic *StockInfoCreate) SetNillableLabelIndustry(s *string) *StockInfoCreate {
	if s != nil {
		sic.SetLabelIndustry(*s)
	}
	return sic
}

// Mutation returns the StockInfoMutation object of the builder.
func (sic *StockInfoCreate) Mutation() *StockInfoMutation {
	return sic.mutation
}

// Save creates the StockInfo in the database.
func (sic *StockInfoCreate) Save(ctx context.Context) (*StockInfo, error) {
	var (
		err  error
		node *StockInfo
	)
	sic.defaults()
	if len(sic.hooks) == 0 {
		if err = sic.check(); err != nil {
			return nil, err
		}
		node, err = sic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StockInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sic.check(); err != nil {
				return nil, err
			}
			sic.mutation = mutation
			if node, err = sic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sic.hooks) - 1; i >= 0; i-- {
			if sic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sic *StockInfoCreate) SaveX(ctx context.Context) *StockInfo {
	v, err := sic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sic *StockInfoCreate) Exec(ctx context.Context) error {
	_, err := sic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sic *StockInfoCreate) ExecX(ctx context.Context) {
	if err := sic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sic *StockInfoCreate) defaults() {
	if _, ok := sic.mutation.ListStatus(); !ok {
		v := stockinfo.DefaultListStatus
		sic.mutation.SetListStatus(v)
	}
	if _, ok := sic.mutation.IsLeader(); !ok {
		v := stockinfo.DefaultIsLeader
		sic.mutation.SetIsLeader(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sic *StockInfoCreate) check() error {
	if _, ok := sic.mutation.TsCode(); !ok {
		return &ValidationError{Name: "ts_code", err: errors.New(`ent: missing required field "StockInfo.ts_code"`)}
	}
	if _, ok := sic.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "StockInfo.symbol"`)}
	}
	if _, ok := sic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "StockInfo.name"`)}
	}
	if _, ok := sic.mutation.Market(); !ok {
		return &ValidationError{Name: "market", err: errors.New(`ent: missing required field "StockInfo.market"`)}
	}
	if _, ok := sic.mutation.ListStatus(); !ok {
		return &ValidationError{Name: "list_status", err: errors.New(`ent: missing required field "StockInfo.list_status"`)}
	}
	if v, ok := sic.mutation.ListStatus(); ok {
		if err := stockinfo.ListStatusValidator(v); err != nil {
			return &ValidationError{Name: "list_status", err: fmt.Errorf(`ent: validator failed for field "StockInfo.list_status": %w`, err)}
		}
	}
	if _, ok := sic.mutation.ListDate(); !ok {
		return &ValidationError{Name: "list_date", err: errors.New(`ent: missing required field "StockInfo.list_date"`)}
	}
	if _, ok := sic.mutation.IsLeader(); !ok {
		return &ValidationError{Name: "is_leader", err: errors.New(`ent: missing required field "StockInfo.is_leader"`)}
	}
	return nil
}

func (sic *StockInfoCreate) sqlSave(ctx context.Context) (*StockInfo, error) {
	_node, _spec := sic.createSpec()
	if err := sqlgraph.CreateNode(ctx, sic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sic *StockInfoCreate) createSpec() (*StockInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &StockInfo{config: sic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: stockinfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: stockinfo.FieldID,
			},
		}
	)
	if value, ok := sic.mutation.TsCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stockinfo.FieldTsCode,
		})
		_node.TsCode = value
	}
	if value, ok := sic.mutation.Symbol(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stockinfo.FieldSymbol,
		})
		_node.Symbol = value
	}
	if value, ok := sic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stockinfo.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sic.mutation.Area(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stockinfo.FieldArea,
		})
		_node.Area = value
	}
	if value, ok := sic.mutation.Industry(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stockinfo.FieldIndustry,
		})
		_node.Industry = value
	}
	if value, ok := sic.mutation.Fullname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stockinfo.FieldFullname,
		})
		_node.Fullname = value
	}
	if value, ok := sic.mutation.Enname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stockinfo.FieldEnname,
		})
		_node.Enname = value
	}
	if value, ok := sic.mutation.Cnspell(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stockinfo.FieldCnspell,
		})
		_node.Cnspell = value
	}
	if value, ok := sic.mutation.Market(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stockinfo.FieldMarket,
		})
		_node.Market = value
	}
	if value, ok := sic.mutation.Exchange(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stockinfo.FieldExchange,
		})
		_node.Exchange = value
	}
	if value, ok := sic.mutation.CurrType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stockinfo.FieldCurrType,
		})
		_node.CurrType = value
	}
	if value, ok := sic.mutation.ListStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: stockinfo.FieldListStatus,
		})
		_node.ListStatus = value
	}
	if value, ok := sic.mutation.ListDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stockinfo.FieldListDate,
		})
		_node.ListDate = value
	}
	if value, ok := sic.mutation.DelistDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: stockinfo.FieldDelistDate,
		})
		_node.DelistDate = value
	}
	if value, ok := sic.mutation.IsHs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stockinfo.FieldIsHs,
		})
		_node.IsHs = value
	}
	if value, ok := sic.mutation.IsLeader(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: stockinfo.FieldIsLeader,
		})
		_node.IsLeader = value
	}
	if value, ok := sic.mutation.LabelIndustry(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: stockinfo.FieldLabelIndustry,
		})
		_node.LabelIndustry = value
	}
	return _node, _spec
}

// StockInfoCreateBulk is the builder for creating many StockInfo entities in bulk.
type StockInfoCreateBulk struct {
	config
	builders []*StockInfoCreate
}

// Save creates the StockInfo entities in the database.
func (sicb *StockInfoCreateBulk) Save(ctx context.Context) ([]*StockInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sicb.builders))
	nodes := make([]*StockInfo, len(sicb.builders))
	mutators := make([]Mutator, len(sicb.builders))
	for i := range sicb.builders {
		func(i int, root context.Context) {
			builder := sicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StockInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sicb *StockInfoCreateBulk) SaveX(ctx context.Context) []*StockInfo {
	v, err := sicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sicb *StockInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := sicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sicb *StockInfoCreateBulk) ExecX(ctx context.Context) {
	if err := sicb.Exec(ctx); err != nil {
		panic(err)
	}
}
