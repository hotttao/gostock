// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.5.0
// source: evaluate/v1/income.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IncomeClient is the client API for Income service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncomeClient interface {
	CreateIncome(ctx context.Context, in *CreateIncomeRequest, opts ...grpc.CallOption) (*CreateIncomeReply, error)
	UpdateIncome(ctx context.Context, in *UpdateIncomeRequest, opts ...grpc.CallOption) (*UpdateIncomeReply, error)
	DeleteIncome(ctx context.Context, in *DeleteIncomeRequest, opts ...grpc.CallOption) (*DeleteIncomeReply, error)
	GetIncome(ctx context.Context, in *GetIncomeRequest, opts ...grpc.CallOption) (*GetIncomeReply, error)
	ListIncome(ctx context.Context, in *ListIncomeRequest, opts ...grpc.CallOption) (*ListIncomeReply, error)
}

type incomeClient struct {
	cc grpc.ClientConnInterface
}

func NewIncomeClient(cc grpc.ClientConnInterface) IncomeClient {
	return &incomeClient{cc}
}

func (c *incomeClient) CreateIncome(ctx context.Context, in *CreateIncomeRequest, opts ...grpc.CallOption) (*CreateIncomeReply, error) {
	out := new(CreateIncomeReply)
	err := c.cc.Invoke(ctx, "/evaluate.v1.Income/CreateIncome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incomeClient) UpdateIncome(ctx context.Context, in *UpdateIncomeRequest, opts ...grpc.CallOption) (*UpdateIncomeReply, error) {
	out := new(UpdateIncomeReply)
	err := c.cc.Invoke(ctx, "/evaluate.v1.Income/UpdateIncome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incomeClient) DeleteIncome(ctx context.Context, in *DeleteIncomeRequest, opts ...grpc.CallOption) (*DeleteIncomeReply, error) {
	out := new(DeleteIncomeReply)
	err := c.cc.Invoke(ctx, "/evaluate.v1.Income/DeleteIncome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incomeClient) GetIncome(ctx context.Context, in *GetIncomeRequest, opts ...grpc.CallOption) (*GetIncomeReply, error) {
	out := new(GetIncomeReply)
	err := c.cc.Invoke(ctx, "/evaluate.v1.Income/GetIncome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incomeClient) ListIncome(ctx context.Context, in *ListIncomeRequest, opts ...grpc.CallOption) (*ListIncomeReply, error) {
	out := new(ListIncomeReply)
	err := c.cc.Invoke(ctx, "/evaluate.v1.Income/ListIncome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncomeServer is the server API for Income service.
// All implementations must embed UnimplementedIncomeServer
// for forward compatibility
type IncomeServer interface {
	CreateIncome(context.Context, *CreateIncomeRequest) (*CreateIncomeReply, error)
	UpdateIncome(context.Context, *UpdateIncomeRequest) (*UpdateIncomeReply, error)
	DeleteIncome(context.Context, *DeleteIncomeRequest) (*DeleteIncomeReply, error)
	GetIncome(context.Context, *GetIncomeRequest) (*GetIncomeReply, error)
	ListIncome(context.Context, *ListIncomeRequest) (*ListIncomeReply, error)
	mustEmbedUnimplementedIncomeServer()
}

// UnimplementedIncomeServer must be embedded to have forward compatible implementations.
type UnimplementedIncomeServer struct {
}

func (UnimplementedIncomeServer) CreateIncome(context.Context, *CreateIncomeRequest) (*CreateIncomeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIncome not implemented")
}
func (UnimplementedIncomeServer) UpdateIncome(context.Context, *UpdateIncomeRequest) (*UpdateIncomeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIncome not implemented")
}
func (UnimplementedIncomeServer) DeleteIncome(context.Context, *DeleteIncomeRequest) (*DeleteIncomeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIncome not implemented")
}
func (UnimplementedIncomeServer) GetIncome(context.Context, *GetIncomeRequest) (*GetIncomeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncome not implemented")
}
func (UnimplementedIncomeServer) ListIncome(context.Context, *ListIncomeRequest) (*ListIncomeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIncome not implemented")
}
func (UnimplementedIncomeServer) mustEmbedUnimplementedIncomeServer() {}

// UnsafeIncomeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncomeServer will
// result in compilation errors.
type UnsafeIncomeServer interface {
	mustEmbedUnimplementedIncomeServer()
}

func RegisterIncomeServer(s grpc.ServiceRegistrar, srv IncomeServer) {
	s.RegisterService(&Income_ServiceDesc, srv)
}

func _Income_CreateIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomeServer).CreateIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evaluate.v1.Income/CreateIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomeServer).CreateIncome(ctx, req.(*CreateIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Income_UpdateIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomeServer).UpdateIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evaluate.v1.Income/UpdateIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomeServer).UpdateIncome(ctx, req.(*UpdateIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Income_DeleteIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomeServer).DeleteIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evaluate.v1.Income/DeleteIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomeServer).DeleteIncome(ctx, req.(*DeleteIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Income_GetIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomeServer).GetIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evaluate.v1.Income/GetIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomeServer).GetIncome(ctx, req.(*GetIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Income_ListIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncomeServer).ListIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evaluate.v1.Income/ListIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncomeServer).ListIncome(ctx, req.(*ListIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Income_ServiceDesc is the grpc.ServiceDesc for Income service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Income_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "evaluate.v1.Income",
	HandlerType: (*IncomeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIncome",
			Handler:    _Income_CreateIncome_Handler,
		},
		{
			MethodName: "UpdateIncome",
			Handler:    _Income_UpdateIncome_Handler,
		},
		{
			MethodName: "DeleteIncome",
			Handler:    _Income_DeleteIncome_Handler,
		},
		{
			MethodName: "GetIncome",
			Handler:    _Income_GetIncome_Handler,
		},
		{
			MethodName: "ListIncome",
			Handler:    _Income_ListIncome_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "evaluate/v1/income.proto",
}
