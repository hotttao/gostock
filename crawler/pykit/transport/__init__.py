from abc import ABCMeta, abstractmethod
from werkzeug.datastructures import Headers
from pykit.context import Context


class Server(metaclass=ABCMeta):
    @abstractmethod
    def start(self, ctx: Context):
        pass

    @abstractmethod
    def stop(self, ctx: Context):
        pass

# Transporter is transport context value interface.


class ITransporter(metaclass=ABCMeta):

    @property
    @abstractmethod
    def kind() -> str:
        # Kind transporter
        # grpc
        # http
        pass

    @property
    @abstractmethod
    def endpoint() -> str:
        # Endpoint return server or client endpoint
        # Server Transport: grpc:#127.0.0.1:9000
        # Client Transport: discovery:#/provider-demo
        pass

    @property
    @abstractmethod
    def operation() -> str:
        # Operation Service full method selector generated by protobuf
        # example: /helloworld.Greeter/SayHello
        pass

    @property
    @abstractmethod
    def request_header() -> Headers:
        # RequestHeader return transport request header
        # http: http.Header
        # grpc: metadata.MD
        pass

    @property
    @abstractmethod
    def reply_header() -> Headers:
        # ReplyHeader return transport reply/response header
        # only valid for server transport
        # http: http.Header
        # grpc: metadata.MD

        # Kind defines the type of Transport
        pass


server_transport_key = object()
client_transport_key = object()


def new_server_context(ctx: Context, tr: ITransporter) -> Context:
    # NewServerContext returns a new Context that carries value.
    ctx[server_transport_key] = tr
    return ctx


def from_server_context(ctx: Context) -> ITransporter:
    # FromServerContext returns the Transport value stored in ctx, if any.
    tr = ctx.get(server_transport_key)
    return tr


def new_client_context(ctx: Context, tr: ITransporter) -> Context:
    # NewClientContext returns a new Context that carries value.
    ctx[client_transport_key] = tr
    return ctx


def from_client_context(ctx: Context) -> ITransporter:
    # FromClientContext returns the Transport value stored in ctx, if any.
    tr = ctx.get(client_transport_key)
    return tr
