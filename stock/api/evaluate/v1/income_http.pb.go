// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.2.2

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type IncomeHTTPServer interface {
	GetIncome(context.Context, *GetIncomeRequest) (*GetIncomeReply, error)
}

func RegisterIncomeHTTPServer(s *http.Server, srv IncomeHTTPServer) {
	r := s.Route("/")
	r.GET("/evaluate/{stock_id}", _Income_GetIncome0_HTTP_Handler(srv))
}

func _Income_GetIncome0_HTTP_Handler(srv IncomeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetIncomeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/evaluate.v1.Income/GetIncome")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetIncome(ctx, req.(*GetIncomeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetIncomeReply)
		return ctx.Result(200, reply)
	}
}

type IncomeHTTPClient interface {
	GetIncome(ctx context.Context, req *GetIncomeRequest, opts ...http.CallOption) (rsp *GetIncomeReply, err error)
}

type IncomeHTTPClientImpl struct {
	cc *http.Client
}

func NewIncomeHTTPClient(client *http.Client) IncomeHTTPClient {
	return &IncomeHTTPClientImpl{client}
}

func (c *IncomeHTTPClientImpl) GetIncome(ctx context.Context, in *GetIncomeRequest, opts ...http.CallOption) (*GetIncomeReply, error) {
	var out GetIncomeReply
	pattern := "/evaluate/{stock_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/evaluate.v1.Income/GetIncome"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
